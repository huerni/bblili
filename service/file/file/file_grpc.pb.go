// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: file.proto

package file

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	File_Ping_FullMethodName             = "/file.File/Ping"
	File_UploadFileSlices_FullMethodName = "/file.File/UploadFileSlices"
	File_DeleteFileMD5_FullMethodName    = "/file.File/DeleteFileMD5"
	File_GetFileMD5_FullMethodName       = "/file.File/GetFileMD5"
	File_GetSuccessChunk_FullMethodName  = "/file.File/GetSuccessChunk"
)

// FileClient is the client API for File service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	UploadFileSlices(ctx context.Context, in *UpLoadFileBySlicesRequest, opts ...grpc.CallOption) (*UploadFileBySliceResponse, error)
	DeleteFileMD5(ctx context.Context, in *GetFileMD5Request, opts ...grpc.CallOption) (*GetFileMD5Response, error)
	GetFileMD5(ctx context.Context, in *GetFileMD5Request, opts ...grpc.CallOption) (*GetFileMD5Response, error)
	GetSuccessChunk(ctx context.Context, in *GetSuccessChunkRequest, opts ...grpc.CallOption) (*GetSuccessChunkResponse, error)
}

type fileClient struct {
	cc grpc.ClientConnInterface
}

func NewFileClient(cc grpc.ClientConnInterface) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, File_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) UploadFileSlices(ctx context.Context, in *UpLoadFileBySlicesRequest, opts ...grpc.CallOption) (*UploadFileBySliceResponse, error) {
	out := new(UploadFileBySliceResponse)
	err := c.cc.Invoke(ctx, File_UploadFileSlices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) DeleteFileMD5(ctx context.Context, in *GetFileMD5Request, opts ...grpc.CallOption) (*GetFileMD5Response, error) {
	out := new(GetFileMD5Response)
	err := c.cc.Invoke(ctx, File_DeleteFileMD5_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) GetFileMD5(ctx context.Context, in *GetFileMD5Request, opts ...grpc.CallOption) (*GetFileMD5Response, error) {
	out := new(GetFileMD5Response)
	err := c.cc.Invoke(ctx, File_GetFileMD5_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) GetSuccessChunk(ctx context.Context, in *GetSuccessChunkRequest, opts ...grpc.CallOption) (*GetSuccessChunkResponse, error) {
	out := new(GetSuccessChunkResponse)
	err := c.cc.Invoke(ctx, File_GetSuccessChunk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServer is the server API for File service.
// All implementations must embed UnimplementedFileServer
// for forward compatibility
type FileServer interface {
	Ping(context.Context, *Request) (*Response, error)
	UploadFileSlices(context.Context, *UpLoadFileBySlicesRequest) (*UploadFileBySliceResponse, error)
	DeleteFileMD5(context.Context, *GetFileMD5Request) (*GetFileMD5Response, error)
	GetFileMD5(context.Context, *GetFileMD5Request) (*GetFileMD5Response, error)
	GetSuccessChunk(context.Context, *GetSuccessChunkRequest) (*GetSuccessChunkResponse, error)
	mustEmbedUnimplementedFileServer()
}

// UnimplementedFileServer must be embedded to have forward compatible implementations.
type UnimplementedFileServer struct {
}

func (UnimplementedFileServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFileServer) UploadFileSlices(context.Context, *UpLoadFileBySlicesRequest) (*UploadFileBySliceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFileSlices not implemented")
}
func (UnimplementedFileServer) DeleteFileMD5(context.Context, *GetFileMD5Request) (*GetFileMD5Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileMD5 not implemented")
}
func (UnimplementedFileServer) GetFileMD5(context.Context, *GetFileMD5Request) (*GetFileMD5Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileMD5 not implemented")
}
func (UnimplementedFileServer) GetSuccessChunk(context.Context, *GetSuccessChunkRequest) (*GetSuccessChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuccessChunk not implemented")
}
func (UnimplementedFileServer) mustEmbedUnimplementedFileServer() {}

// UnsafeFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServer will
// result in compilation errors.
type UnsafeFileServer interface {
	mustEmbedUnimplementedFileServer()
}

func RegisterFileServer(s grpc.ServiceRegistrar, srv FileServer) {
	s.RegisterService(&File_ServiceDesc, srv)
}

func _File_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_UploadFileSlices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpLoadFileBySlicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).UploadFileSlices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_UploadFileSlices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).UploadFileSlices(ctx, req.(*UpLoadFileBySlicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_DeleteFileMD5_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileMD5Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).DeleteFileMD5(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_DeleteFileMD5_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).DeleteFileMD5(ctx, req.(*GetFileMD5Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_GetFileMD5_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileMD5Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).GetFileMD5(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_GetFileMD5_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).GetFileMD5(ctx, req.(*GetFileMD5Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_GetSuccessChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuccessChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).GetSuccessChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_GetSuccessChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).GetSuccessChunk(ctx, req.(*GetSuccessChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// File_ServiceDesc is the grpc.ServiceDesc for File service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var File_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file.File",
	HandlerType: (*FileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _File_Ping_Handler,
		},
		{
			MethodName: "UploadFileSlices",
			Handler:    _File_UploadFileSlices_Handler,
		},
		{
			MethodName: "DeleteFileMD5",
			Handler:    _File_DeleteFileMD5_Handler,
		},
		{
			MethodName: "GetFileMD5",
			Handler:    _File_GetFileMD5_Handler,
		},
		{
			MethodName: "GetSuccessChunk",
			Handler:    _File_GetSuccessChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file.proto",
}
