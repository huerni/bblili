// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: video.proto

package video

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Video_Ping_FullMethodName                = "/video.Video/Ping"
	Video_AddVideo_FullMethodName            = "/video.Video/AddVideo"
	Video_GetVideos_FullMethodName           = "/video.Video/GetVideos"
	Video_ViewVideo_FullMethodName           = "/video.Video/ViewVideo"
	Video_GetVideoDetails_FullMethodName     = "/video.Video/GetVideoDetails"
	Video_Recommend_FullMethodName           = "/video.Video/Recommend"
	Video_GetVideoSanLian_FullMethodName     = "/video.Video/GetVideoSanLian"
	Video_GetVideoUserSanLian_FullMethodName = "/video.Video/GetVideoUserSanLian"
	Video_OperateVideoSanLian_FullMethodName = "/video.Video/OperateVideoSanLian"
	Video_AddVideoComment_FullMethodName     = "/video.Video/AddVideoComment"
	Video_GetVideoComments_FullMethodName    = "/video.Video/GetVideoComments"
)

// VideoClient is the client API for Video service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddVideo(ctx context.Context, in *AddVideoRequest, opts ...grpc.CallOption) (*AddVideoResponse, error)
	GetVideos(ctx context.Context, in *GetVideosRequest, opts ...grpc.CallOption) (*GetVideosResponse, error)
	ViewVideo(ctx context.Context, in *ViewVideoRequest, opts ...grpc.CallOption) (*ViewVideoResponse, error)
	GetVideoDetails(ctx context.Context, in *GetVideoDetailsRequest, opts ...grpc.CallOption) (*GetVideoDetailsResponse, error)
	Recommend(ctx context.Context, in *RecommendRequest, opts ...grpc.CallOption) (*RecommendResponse, error)
	GetVideoSanLian(ctx context.Context, in *GetVideoSanLianRequest, opts ...grpc.CallOption) (*GetVideoSanLianResponse, error)
	GetVideoUserSanLian(ctx context.Context, in *GetVideoUserSanLianRequest, opts ...grpc.CallOption) (*GetVideoUserSanLianResponse, error)
	OperateVideoSanLian(ctx context.Context, in *OperateVideoSanLianRequest, opts ...grpc.CallOption) (*OperateVideoSanLianResponse, error)
	AddVideoComment(ctx context.Context, in *AddVideoCommentRequest, opts ...grpc.CallOption) (*AddVideoCommentResponse, error)
	GetVideoComments(ctx context.Context, in *GetVideoCommentsRequest, opts ...grpc.CallOption) (*GetVideoCommentsResponse, error)
}

type videoClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoClient(cc grpc.ClientConnInterface) VideoClient {
	return &videoClient{cc}
}

func (c *videoClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Video_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) AddVideo(ctx context.Context, in *AddVideoRequest, opts ...grpc.CallOption) (*AddVideoResponse, error) {
	out := new(AddVideoResponse)
	err := c.cc.Invoke(ctx, Video_AddVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetVideos(ctx context.Context, in *GetVideosRequest, opts ...grpc.CallOption) (*GetVideosResponse, error) {
	out := new(GetVideosResponse)
	err := c.cc.Invoke(ctx, Video_GetVideos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) ViewVideo(ctx context.Context, in *ViewVideoRequest, opts ...grpc.CallOption) (*ViewVideoResponse, error) {
	out := new(ViewVideoResponse)
	err := c.cc.Invoke(ctx, Video_ViewVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetVideoDetails(ctx context.Context, in *GetVideoDetailsRequest, opts ...grpc.CallOption) (*GetVideoDetailsResponse, error) {
	out := new(GetVideoDetailsResponse)
	err := c.cc.Invoke(ctx, Video_GetVideoDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) Recommend(ctx context.Context, in *RecommendRequest, opts ...grpc.CallOption) (*RecommendResponse, error) {
	out := new(RecommendResponse)
	err := c.cc.Invoke(ctx, Video_Recommend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetVideoSanLian(ctx context.Context, in *GetVideoSanLianRequest, opts ...grpc.CallOption) (*GetVideoSanLianResponse, error) {
	out := new(GetVideoSanLianResponse)
	err := c.cc.Invoke(ctx, Video_GetVideoSanLian_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetVideoUserSanLian(ctx context.Context, in *GetVideoUserSanLianRequest, opts ...grpc.CallOption) (*GetVideoUserSanLianResponse, error) {
	out := new(GetVideoUserSanLianResponse)
	err := c.cc.Invoke(ctx, Video_GetVideoUserSanLian_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) OperateVideoSanLian(ctx context.Context, in *OperateVideoSanLianRequest, opts ...grpc.CallOption) (*OperateVideoSanLianResponse, error) {
	out := new(OperateVideoSanLianResponse)
	err := c.cc.Invoke(ctx, Video_OperateVideoSanLian_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) AddVideoComment(ctx context.Context, in *AddVideoCommentRequest, opts ...grpc.CallOption) (*AddVideoCommentResponse, error) {
	out := new(AddVideoCommentResponse)
	err := c.cc.Invoke(ctx, Video_AddVideoComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetVideoComments(ctx context.Context, in *GetVideoCommentsRequest, opts ...grpc.CallOption) (*GetVideoCommentsResponse, error) {
	out := new(GetVideoCommentsResponse)
	err := c.cc.Invoke(ctx, Video_GetVideoComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServer is the server API for Video service.
// All implementations must embed UnimplementedVideoServer
// for forward compatibility
type VideoServer interface {
	Ping(context.Context, *Request) (*Response, error)
	AddVideo(context.Context, *AddVideoRequest) (*AddVideoResponse, error)
	GetVideos(context.Context, *GetVideosRequest) (*GetVideosResponse, error)
	ViewVideo(context.Context, *ViewVideoRequest) (*ViewVideoResponse, error)
	GetVideoDetails(context.Context, *GetVideoDetailsRequest) (*GetVideoDetailsResponse, error)
	Recommend(context.Context, *RecommendRequest) (*RecommendResponse, error)
	GetVideoSanLian(context.Context, *GetVideoSanLianRequest) (*GetVideoSanLianResponse, error)
	GetVideoUserSanLian(context.Context, *GetVideoUserSanLianRequest) (*GetVideoUserSanLianResponse, error)
	OperateVideoSanLian(context.Context, *OperateVideoSanLianRequest) (*OperateVideoSanLianResponse, error)
	AddVideoComment(context.Context, *AddVideoCommentRequest) (*AddVideoCommentResponse, error)
	GetVideoComments(context.Context, *GetVideoCommentsRequest) (*GetVideoCommentsResponse, error)
	mustEmbedUnimplementedVideoServer()
}

// UnimplementedVideoServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServer struct {
}

func (UnimplementedVideoServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedVideoServer) AddVideo(context.Context, *AddVideoRequest) (*AddVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVideo not implemented")
}
func (UnimplementedVideoServer) GetVideos(context.Context, *GetVideosRequest) (*GetVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideos not implemented")
}
func (UnimplementedVideoServer) ViewVideo(context.Context, *ViewVideoRequest) (*ViewVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewVideo not implemented")
}
func (UnimplementedVideoServer) GetVideoDetails(context.Context, *GetVideoDetailsRequest) (*GetVideoDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoDetails not implemented")
}
func (UnimplementedVideoServer) Recommend(context.Context, *RecommendRequest) (*RecommendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recommend not implemented")
}
func (UnimplementedVideoServer) GetVideoSanLian(context.Context, *GetVideoSanLianRequest) (*GetVideoSanLianResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoSanLian not implemented")
}
func (UnimplementedVideoServer) GetVideoUserSanLian(context.Context, *GetVideoUserSanLianRequest) (*GetVideoUserSanLianResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoUserSanLian not implemented")
}
func (UnimplementedVideoServer) OperateVideoSanLian(context.Context, *OperateVideoSanLianRequest) (*OperateVideoSanLianResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateVideoSanLian not implemented")
}
func (UnimplementedVideoServer) AddVideoComment(context.Context, *AddVideoCommentRequest) (*AddVideoCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVideoComment not implemented")
}
func (UnimplementedVideoServer) GetVideoComments(context.Context, *GetVideoCommentsRequest) (*GetVideoCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoComments not implemented")
}
func (UnimplementedVideoServer) mustEmbedUnimplementedVideoServer() {}

// UnsafeVideoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServer will
// result in compilation errors.
type UnsafeVideoServer interface {
	mustEmbedUnimplementedVideoServer()
}

func RegisterVideoServer(s grpc.ServiceRegistrar, srv VideoServer) {
	s.RegisterService(&Video_ServiceDesc, srv)
}

func _Video_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_AddVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).AddVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_AddVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).AddVideo(ctx, req.(*AddVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetVideos(ctx, req.(*GetVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_ViewVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).ViewVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_ViewVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).ViewVideo(ctx, req.(*ViewVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetVideoDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetVideoDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetVideoDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetVideoDetails(ctx, req.(*GetVideoDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_Recommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).Recommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_Recommend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).Recommend(ctx, req.(*RecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetVideoSanLian_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoSanLianRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetVideoSanLian(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetVideoSanLian_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetVideoSanLian(ctx, req.(*GetVideoSanLianRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetVideoUserSanLian_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoUserSanLianRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetVideoUserSanLian(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetVideoUserSanLian_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetVideoUserSanLian(ctx, req.(*GetVideoUserSanLianRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_OperateVideoSanLian_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateVideoSanLianRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).OperateVideoSanLian(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_OperateVideoSanLian_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).OperateVideoSanLian(ctx, req.(*OperateVideoSanLianRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_AddVideoComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVideoCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).AddVideoComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_AddVideoComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).AddVideoComment(ctx, req.(*AddVideoCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetVideoComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetVideoComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetVideoComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetVideoComments(ctx, req.(*GetVideoCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Video_ServiceDesc is the grpc.ServiceDesc for Video service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Video_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.Video",
	HandlerType: (*VideoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Video_Ping_Handler,
		},
		{
			MethodName: "AddVideo",
			Handler:    _Video_AddVideo_Handler,
		},
		{
			MethodName: "GetVideos",
			Handler:    _Video_GetVideos_Handler,
		},
		{
			MethodName: "ViewVideo",
			Handler:    _Video_ViewVideo_Handler,
		},
		{
			MethodName: "GetVideoDetails",
			Handler:    _Video_GetVideoDetails_Handler,
		},
		{
			MethodName: "Recommend",
			Handler:    _Video_Recommend_Handler,
		},
		{
			MethodName: "GetVideoSanLian",
			Handler:    _Video_GetVideoSanLian_Handler,
		},
		{
			MethodName: "GetVideoUserSanLian",
			Handler:    _Video_GetVideoUserSanLian_Handler,
		},
		{
			MethodName: "OperateVideoSanLian",
			Handler:    _Video_OperateVideoSanLian_Handler,
		},
		{
			MethodName: "AddVideoComment",
			Handler:    _Video_AddVideoComment_Handler,
		},
		{
			MethodName: "GetVideoComments",
			Handler:    _Video_GetVideoComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}
